// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test/test1.proto

package golden

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/roderm/protoc-gen-go-sqlmap/sqlgen"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Company struct {
	Id                   string      `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name                 string      `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Branch               string      `protobuf:"bytes,3,opt,name=Branch,proto3" json:"Branch,omitempty"`
	Url                  string      `protobuf:"bytes,4,opt,name=Url,proto3" json:"Url,omitempty"`
	Founded              string      `protobuf:"bytes,5,opt,name=Founded,proto3" json:"Founded,omitempty"`
	Employees            []*Employee `protobuf:"bytes,6,rep,name=Employees,proto3" json:"Employees,omitempty"`
	Products             []*Product  `protobuf:"bytes,7,rep,name=Products,proto3" json:"Products,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Company) Reset()         { *m = Company{} }
func (m *Company) String() string { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()    {}
func (*Company) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f412dec962a7bbe, []int{0}
}
func (m *Company) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Company.Unmarshal(m, b)
}
func (m *Company) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Company.Marshal(b, m, deterministic)
}
func (m *Company) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Company.Merge(m, src)
}
func (m *Company) XXX_Size() int {
	return xxx_messageInfo_Company.Size(m)
}
func (m *Company) XXX_DiscardUnknown() {
	xxx_messageInfo_Company.DiscardUnknown(m)
}

var xxx_messageInfo_Company proto.InternalMessageInfo

func (m *Company) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Company) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Company) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *Company) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Company) GetFounded() string {
	if m != nil {
		return m.Founded
	}
	return ""
}

func (m *Company) GetEmployees() []*Employee {
	if m != nil {
		return m.Employees
	}
	return nil
}

func (m *Company) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

type Employee struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CompanyId            string   `protobuf:"bytes,2,opt,name=CompanyId,proto3" json:"CompanyId,omitempty"`
	Firstname            string   `protobuf:"bytes,3,opt,name=Firstname,proto3" json:"Firstname,omitempty"`
	Lastname             string   `protobuf:"bytes,4,opt,name=Lastname,proto3" json:"Lastname,omitempty"`
	Email                string   `protobuf:"bytes,5,opt,name=Email,proto3" json:"Email,omitempty"`
	Birthdate            string   `protobuf:"bytes,6,opt,name=Birthdate,proto3" json:"Birthdate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Employee) Reset()         { *m = Employee{} }
func (m *Employee) String() string { return proto.CompactTextString(m) }
func (*Employee) ProtoMessage()    {}
func (*Employee) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f412dec962a7bbe, []int{1}
}
func (m *Employee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Employee.Unmarshal(m, b)
}
func (m *Employee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Employee.Marshal(b, m, deterministic)
}
func (m *Employee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Employee.Merge(m, src)
}
func (m *Employee) XXX_Size() int {
	return xxx_messageInfo_Employee.Size(m)
}
func (m *Employee) XXX_DiscardUnknown() {
	xxx_messageInfo_Employee.DiscardUnknown(m)
}

var xxx_messageInfo_Employee proto.InternalMessageInfo

func (m *Employee) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Employee) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *Employee) GetFirstname() string {
	if m != nil {
		return m.Firstname
	}
	return ""
}

func (m *Employee) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

func (m *Employee) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Employee) GetBirthdate() string {
	if m != nil {
		return m.Birthdate
	}
	return ""
}

type Product struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CompanyId            string   `protobuf:"bytes,2,opt,name=CompanyId,proto3" json:"CompanyId,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	ProdType             string   `protobuf:"bytes,4,opt,name=ProdType,proto3" json:"ProdType,omitempty"`
	Manufactured         int64    `protobuf:"varint,5,opt,name=Manufactured,proto3" json:"Manufactured,omitempty"`
	Sold                 int64    `protobuf:"varint,6,opt,name=Sold,proto3" json:"Sold,omitempty"`
	Price                float32  `protobuf:"fixed32,7,opt,name=Price,proto3" json:"Price,omitempty"`
	Release              string   `protobuf:"bytes,8,opt,name=release,proto3" json:"release,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f412dec962a7bbe, []int{2}
}
func (m *Product) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Product.Unmarshal(m, b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Product.Marshal(b, m, deterministic)
}
func (m *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(m, src)
}
func (m *Product) XXX_Size() int {
	return xxx_messageInfo_Product.Size(m)
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

func (m *Product) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Product) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetProdType() string {
	if m != nil {
		return m.ProdType
	}
	return ""
}

func (m *Product) GetManufactured() int64 {
	if m != nil {
		return m.Manufactured
	}
	return 0
}

func (m *Product) GetSold() int64 {
	if m != nil {
		return m.Sold
	}
	return 0
}

func (m *Product) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Product) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

func init() {
	proto.RegisterType((*Company)(nil), "example.Company")
	proto.RegisterType((*Employee)(nil), "example.Employee")
	proto.RegisterType((*Product)(nil), "example.Product")
}

func init() { proto.RegisterFile("test/test1.proto", fileDescriptor_0f412dec962a7bbe) }

var fileDescriptor_0f412dec962a7bbe = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xc1, 0x8a, 0x13, 0x31,
	0x1c, 0xc6, 0xe9, 0x4c, 0xdb, 0x99, 0xc9, 0x76, 0x97, 0xdd, 0x9c, 0xc2, 0xa2, 0x52, 0x2a, 0x68,
	0x95, 0x6d, 0x8b, 0x8a, 0x97, 0xe2, 0x69, 0x64, 0x17, 0x0a, 0x2a, 0x4b, 0xd4, 0x8b, 0x97, 0x25,
	0x9d, 0xa4, 0xed, 0x40, 0x32, 0xc9, 0x66, 0x32, 0x60, 0xaf, 0x1e, 0xf6, 0x29, 0xc4, 0x83, 0x0f,
	0xb5, 0x1e, 0x7d, 0x07, 0x4f, 0x1e, 0x25, 0x99, 0x4c, 0xa7, 0x82, 0xe0, 0x69, 0x2f, 0x2d, 0xfd,
	0xbe, 0xdf, 0x24, 0xe9, 0x6f, 0xfe, 0x01, 0xc7, 0x86, 0x95, 0x66, 0x66, 0x3f, 0x9e, 0x4d, 0x95,
	0x96, 0x46, 0xc2, 0x88, 0x7d, 0x26, 0x42, 0x71, 0x76, 0x3a, 0x5f, 0xe7, 0x66, 0x53, 0x2d, 0xa7,
	0x99, 0x14, 0x33, 0x2d, 0x29, 0xd3, 0x62, 0xe6, 0x88, 0x6c, 0xb2, 0x66, 0xc5, 0x64, 0x2d, 0x27,
	0xe5, 0x35, 0x17, 0x44, 0xcd, 0xca, 0x6b, 0xbe, 0x66, 0x85, 0xff, 0xaa, 0x17, 0x19, 0x7d, 0x0d,
	0x40, 0xf4, 0x5a, 0x0a, 0x45, 0x8a, 0x2d, 0xbc, 0x07, 0x82, 0x05, 0x45, 0x9d, 0x61, 0x67, 0x9c,
	0xa4, 0x83, 0x5f, 0xb7, 0x37, 0x61, 0x90, 0xd3, 0xdf, 0xb7, 0x37, 0x61, 0x07, 0x07, 0x0b, 0x0a,
	0xef, 0x83, 0xee, 0x3b, 0x22, 0x18, 0x0a, 0x5c, 0x9f, 0xd8, 0xbe, 0x5b, 0x10, 0xc1, 0xb0, 0x8b,
	0xe1, 0x43, 0xd0, 0x4f, 0x35, 0x29, 0xb2, 0x0d, 0x0a, 0x1d, 0x70, 0x60, 0x81, 0xfe, 0xd2, 0x45,
	0xd8, 0x57, 0xf0, 0x14, 0x84, 0x1f, 0x35, 0x47, 0x5d, 0x47, 0xc4, 0x96, 0x08, 0x2b, 0xcd, 0xb1,
	0x0d, 0xe1, 0x23, 0x10, 0x5d, 0xc8, 0xaa, 0xa0, 0x8c, 0xa2, 0x5e, 0x7b, 0x84, 0x68, 0x55, 0x67,
	0xb8, 0x29, 0xe1, 0x0c, 0x24, 0xe7, 0x42, 0x71, 0xb9, 0x65, 0xac, 0x44, 0xfd, 0x61, 0x38, 0x3e,
	0x78, 0x7e, 0x32, 0xf5, 0x2a, 0xa6, 0x4d, 0x83, 0x5b, 0x06, 0x9e, 0x81, 0xf8, 0x52, 0x4b, 0x5a,
	0x65, 0xa6, 0x44, 0x91, 0xe3, 0x8f, 0x77, 0xbc, 0x2f, 0xf0, 0x8e, 0x98, 0x0f, 0xbe, 0xdb, 0x5d,
	0xb3, 0x5a, 0xc9, 0xe8, 0x5b, 0x00, 0xe2, 0x66, 0xa5, 0xff, 0xf8, 0x79, 0x05, 0x12, 0x2f, 0x72,
	0x41, 0xbd, 0xa4, 0x07, 0x16, 0x02, 0x7e, 0xad, 0xab, 0x9c, 0x7e, 0xf9, 0xd1, 0xfe, 0x9c, 0xe6,
	0x14, 0xb7, 0x0f, 0xc0, 0x33, 0x90, 0x5c, 0xe4, 0xba, 0x34, 0xd6, 0xa8, 0x37, 0x78, 0x64, 0x9f,
	0x4e, 0x56, 0x4d, 0x8a, 0x5b, 0x00, 0x3e, 0x01, 0xf1, 0x1b, 0xe2, 0xe1, 0x5a, 0xe6, 0xa1, 0x85,
	0x63, 0xee, 0x43, 0xbc, 0xab, 0xe1, 0x10, 0xf4, 0xce, 0x05, 0xc9, 0xb9, 0x97, 0x0a, 0x2c, 0xd7,
	0x63, 0x36, 0xc1, 0x75, 0x61, 0xb7, 0x4e, 0x73, 0x6d, 0x36, 0x94, 0x18, 0x86, 0xfa, 0x7b, 0x5b,
	0x2f, 0x9b, 0x14, 0xb7, 0xc0, 0xfc, 0xd0, 0xfa, 0x89, 0x99, 0x77, 0x32, 0xfa, 0x19, 0x80, 0xc8,
	0xbb, 0xbb, 0x53, 0x3f, 0xcd, 0xf4, 0x85, 0xff, 0x9e, 0xbe, 0xa7, 0xf5, 0x3b, 0xfe, 0xb0, 0x55,
	0x8d, 0x90, 0xfa, 0x2f, 0x28, 0x2d, 0xe9, 0x95, 0xd9, 0x2a, 0x86, 0x77, 0x3d, 0x7c, 0x09, 0x06,
	0x6f, 0x49, 0x51, 0xad, 0x48, 0x66, 0x2a, 0xed, 0xa7, 0x2d, 0x4c, 0x4f, 0x2c, 0x3f, 0x10, 0x7b,
	0x05, 0xfe, 0x0b, 0xb3, 0x27, 0x78, 0x2f, 0x39, 0x75, 0x86, 0x42, 0x7f, 0x82, 0x52, 0x72, 0x8a,
	0x5d, 0x6c, 0x3d, 0x5f, 0xea, 0x3c, 0x63, 0x28, 0x1a, 0x76, 0xc6, 0x81, 0xf7, 0xac, 0x6c, 0x82,
	0xeb, 0x02, 0x3e, 0x06, 0x91, 0x66, 0x9c, 0x91, 0x92, 0xa1, 0x78, 0xef, 0x9d, 0xf9, 0x8c, 0xe2,
	0xa6, 0xf5, 0x23, 0xa8, 0x6a, 0xab, 0xe9, 0xd1, 0xa7, 0x81, 0xbb, 0xfa, 0x7e, 0x64, 0x97, 0x7d,
	0x77, 0x71, 0x5f, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x10, 0x6c, 0x61, 0x81, 0x11, 0x04, 0x00,
	0x00,
}
