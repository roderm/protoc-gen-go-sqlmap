package sqlgen

import (
	// pb "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"

	"fmt"

	"github.com/gogo/protobuf/protoc-gen-gogo/generator"
)

type pk string

const (
	pkNone = ""
	pkAuto = "auto"
	pkMan  = "man"
)

// func init() {
// 	generator.RegisterPlugin(New())
// }

type SqlGenerator struct {
	*generator.Generator
	generator.PluginImports
	file       *generator.FileDescriptor
	localName  string
	atleastOne bool
}

func New() generator.Plugin {
	return new(SqlGenerator)
}
func (p *SqlGenerator) Name() string {
	return "crdb"
}

// Init is called once after data structures are built but before
// code generation begins.
func (p *SqlGenerator) Init(g *generator.Generator) {
	p.Generator = g
}

// Generate produces the code generated by the plugin for this file,
// except for the imports, by calling the generator's methods P, In, and Out.
func (p *SqlGenerator) Generate(file *generator.FileDescriptor) {
	p.localName = generator.FileName(file)
	p.PluginImports = generator.NewPluginImports(p.Generator)
	p.file = file

	NewTableMessages(p.file.Messages())

	p.AddImport(generator.GoImportPath("github.com/roderm/protoc-gen-go-sqlmap/lib/pg"))
	p.AddImport(generator.GoImportPath("database/sql"))
	p.AddImport(generator.GoImportPath("context"))

	fmt.Fprint(p, `
	var _ = context.TODO
	var _ = pg.NONE
	var _ = sql.Open
	`)

	p.P(`
		type Store struct {
			conn *sql.DB
		}

		func NewStore(conn *sql.DB) *Store {
			return &Store{conn}
		}
	`)
	for _, tbl := range GetTM().messageTables {
		tbl.ConfigStructs(p)
		tbl.Querier(p)
		// tbl.Inserter(p)
	}
	if !p.atleastOne {
		return
	}
}
