// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sqlgen/sqlgen.proto

// import "github.com/gogo/protobuf/protobuf/google/protobuf/descriptor.proto";

package sqlgen

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PK int32

const (
	PK_NONE PK = 0
	PK_AUTO PK = 1
	PK_MAN  PK = 2
)

var PK_name = map[int32]string{
	0: "NONE",
	1: "AUTO",
	2: "MAN",
}

var PK_value = map[string]int32{
	"NONE": 0,
	"AUTO": 1,
	"MAN":  2,
}

func (x PK) Enum() *PK {
	p := new(PK)
	*p = x
	return p
}

func (x PK) String() string {
	return proto.EnumName(PK_name, int32(x))
}

func (x *PK) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PK_value, data, "PK")
	if err != nil {
		return err
	}
	*x = PK(value)
	return nil
}

func (PK) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ada5781a4e9b1a15, []int{0}
}

type OPERATION int32

const (
	OPERATION_C OPERATION = 0
	OPERATION_R OPERATION = 1
	OPERATION_U OPERATION = 2
	OPERATION_D OPERATION = 3
)

var OPERATION_name = map[int32]string{
	0: "C",
	1: "R",
	2: "U",
	3: "D",
}

var OPERATION_value = map[string]int32{
	"C": 0,
	"R": 1,
	"U": 2,
	"D": 3,
}

func (x OPERATION) Enum() *OPERATION {
	p := new(OPERATION)
	*p = x
	return p
}

func (x OPERATION) String() string {
	return proto.EnumName(OPERATION_name, int32(x))
}

func (x *OPERATION) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(OPERATION_value, data, "OPERATION")
	if err != nil {
		return err
	}
	*x = OPERATION(value)
	return nil
}

func (OPERATION) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ada5781a4e9b1a15, []int{1}
}

type Table struct {
	Name                 *string     `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Crud                 []OPERATION `protobuf:"varint,2,rep,name=crud,enum=sqlgen.OPERATION" json:"crud,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Table) Reset()         { *m = Table{} }
func (m *Table) String() string { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()    {}
func (*Table) Descriptor() ([]byte, []int) {
	return fileDescriptor_ada5781a4e9b1a15, []int{0}
}
func (m *Table) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Table.Unmarshal(m, b)
}
func (m *Table) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Table.Marshal(b, m, deterministic)
}
func (m *Table) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table.Merge(m, src)
}
func (m *Table) XXX_Size() int {
	return xxx_messageInfo_Table.Size(m)
}
func (m *Table) XXX_DiscardUnknown() {
	xxx_messageInfo_Table.DiscardUnknown(m)
}

var xxx_messageInfo_Table proto.InternalMessageInfo

func (m *Table) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Table) GetCrud() []OPERATION {
	if m != nil {
		return m.Crud
	}
	return nil
}

var E_Sqlgen = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FileOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         800200,
	Name:          "sqlgen.sqlgen",
	Tag:           "varint,800200,opt,name=sqlgen",
	Filename:      "sqlgen/sqlgen.proto",
}

var E_StoreName = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FileOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         800201,
	Name:          "sqlgen.StoreName",
	Tag:           "bytes,800201,opt,name=StoreName",
	Filename:      "sqlgen/sqlgen.proto",
}

var E_Table = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*Table)(nil),
	Field:         800100,
	Name:          "sqlgen.table",
	Tag:           "bytes,800100,opt,name=table",
	Filename:      "sqlgen/sqlgen.proto",
}

var E_Jsonb = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         800101,
	Name:          "sqlgen.jsonb",
	Tag:           "varint,800101,opt,name=jsonb",
	Filename:      "sqlgen/sqlgen.proto",
}

var E_Dbcol = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         800110,
	Name:          "sqlgen.dbcol",
	Tag:           "bytes,800110,opt,name=dbcol",
	Filename:      "sqlgen/sqlgen.proto",
}

var E_Dbpk = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*PK)(nil),
	Field:         800111,
	Name:          "sqlgen.dbpk",
	Tag:           "varint,800111,opt,name=dbpk,enum=sqlgen.PK",
	Filename:      "sqlgen/sqlgen.proto",
}

var E_Dbfk = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         800112,
	Name:          "sqlgen.dbfk",
	Tag:           "bytes,800112,opt,name=dbfk",
	Filename:      "sqlgen/sqlgen.proto",
}

func init() {
	proto.RegisterEnum("sqlgen.PK", PK_name, PK_value)
	proto.RegisterEnum("sqlgen.OPERATION", OPERATION_name, OPERATION_value)
	proto.RegisterType((*Table)(nil), "sqlgen.Table")
	proto.RegisterExtension(E_Sqlgen)
	proto.RegisterExtension(E_StoreName)
	proto.RegisterExtension(E_Table)
	proto.RegisterExtension(E_Jsonb)
	proto.RegisterExtension(E_Dbcol)
	proto.RegisterExtension(E_Dbpk)
	proto.RegisterExtension(E_Dbfk)
}

func init() { proto.RegisterFile("sqlgen/sqlgen.proto", fileDescriptor_ada5781a4e9b1a15) }

var fileDescriptor_ada5781a4e9b1a15 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x5f, 0x8b, 0xd3, 0x40,
	0x10, 0xc0, 0x9b, 0x34, 0xd1, 0x66, 0xc4, 0x12, 0xd7, 0x97, 0x22, 0x8a, 0x55, 0x10, 0x4b, 0x21,
	0x89, 0x54, 0x54, 0x08, 0x82, 0xb4, 0xda, 0x82, 0x94, 0x26, 0x65, 0x6d, 0x5f, 0x7c, 0xcb, 0x9f,
	0xed, 0x1a, 0x4d, 0xb2, 0x69, 0x92, 0x7e, 0x47, 0xfd, 0x1e, 0xde, 0x4b, 0x0f, 0xee, 0xee, 0x23,
	0x1c, 0xd9, 0x4d, 0xda, 0x83, 0x3b, 0xae, 0x4f, 0x33, 0xcb, 0xcc, 0x6f, 0xf2, 0xcb, 0x30, 0xf0,
	0xb4, 0xd8, 0xc6, 0x94, 0xa4, 0x96, 0x08, 0x66, 0x96, 0xb3, 0x92, 0xa1, 0x07, 0xe2, 0xf5, 0x6c,
	0x42, 0xa3, 0xf2, 0xd7, 0xce, 0x37, 0x03, 0x96, 0x58, 0x94, 0x51, 0x66, 0xf1, 0xb2, 0xbf, 0xdb,
	0x1c, 0x13, 0xca, 0x18, 0x8d, 0xc9, 0xf1, 0x1d, 0x92, 0x22, 0xc8, 0xa3, 0xac, 0x64, 0xb9, 0x98,
	0xf5, 0x7a, 0x02, 0xea, 0xca, 0xf3, 0x63, 0x82, 0x10, 0x28, 0xa9, 0x97, 0x90, 0x9e, 0xd4, 0x97,
	0x07, 0x1a, 0xe6, 0x39, 0x7a, 0x03, 0x4a, 0x90, 0xef, 0xc2, 0x9e, 0xdc, 0x6f, 0x0f, 0xba, 0xa3,
	0x27, 0x66, 0x6d, 0xe1, 0x2e, 0xa7, 0x78, 0xbc, 0xfa, 0xee, 0x3a, 0x98, 0x97, 0x87, 0xaf, 0x40,
	0x5e, 0xce, 0x51, 0x07, 0x14, 0xc7, 0x75, 0xa6, 0x7a, 0xab, 0xca, 0xc6, 0xeb, 0x95, 0xab, 0x4b,
	0xe8, 0x21, 0xb4, 0x17, 0x63, 0x47, 0x97, 0x87, 0x6f, 0x41, 0x3b, 0x50, 0x48, 0x05, 0xe9, 0xab,
	0xde, 0xaa, 0x02, 0xd6, 0xa5, 0x2a, 0xac, 0x75, 0xb9, 0x0a, 0xdf, 0xf4, 0xb6, 0xfd, 0x11, 0xea,
	0xbf, 0x43, 0xcf, 0x4d, 0x21, 0x6f, 0x36, 0xf2, 0xe6, 0x2c, 0x8a, 0x89, 0x9b, 0x95, 0x11, 0x4b,
	0x8b, 0xde, 0xdf, 0xf3, 0x77, 0x7d, 0x69, 0xd0, 0xc1, 0x75, 0xb7, 0xfd, 0x19, 0xb4, 0x1f, 0x25,
	0xcb, 0x89, 0x53, 0x79, 0xdf, 0x8f, 0xfe, 0xe3, 0xa8, 0x86, 0x8f, 0x80, 0x3d, 0x03, 0xb5, 0xe4,
	0x5b, 0x78, 0x79, 0x8b, 0x5c, 0x90, 0xa2, 0xf0, 0xe8, 0x01, 0xfe, 0xbf, 0xaf, 0xe0, 0x47, 0xa3,
	0xc7, 0xcd, 0x32, 0xf8, 0xf6, 0xb0, 0xc0, 0xed, 0x4f, 0xa0, 0xfe, 0x2e, 0x58, 0xea, 0x9f, 0x9e,
	0x73, 0xb6, 0x17, 0xfe, 0xa2, 0xdf, 0xfe, 0x00, 0x6a, 0xe8, 0x07, 0x2c, 0x46, 0x2f, 0xee, 0x50,
	0x27, 0x71, 0xd8, 0x60, 0x17, 0x7b, 0xe1, 0x2e, 0xba, 0xed, 0x2f, 0xa0, 0x84, 0x7e, 0xf6, 0xe7,
	0x14, 0x75, 0xc9, 0xa9, 0xee, 0x08, 0x1a, 0xe9, 0xe5, 0x1c, 0x73, 0xd0, 0x7e, 0x5f, 0x0d, 0xd8,
	0x9c, 0x1c, 0x70, 0x55, 0x7f, 0x96, 0x37, 0x4f, 0xac, 0x9f, 0xc6, 0x8d, 0xcb, 0xcb, 0x59, 0x48,
	0xf2, 0x44, 0x9c, 0x58, 0x60, 0x50, 0x92, 0x1a, 0x94, 0x19, 0xc5, 0x36, 0x4e, 0xbc, 0xac, 0x3e,
	0xdb, 0xeb, 0x00, 0x00, 0x00, 0xff, 0xff, 0xed, 0x14, 0x21, 0x35, 0xc6, 0x02, 0x00, 0x00,
}
