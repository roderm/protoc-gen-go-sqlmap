{{ if .Read }}
type query{{ .MsgName }}Config struct {
	Store *{{ .StoreName }}
	filter pg.Where 
	beforeReturn []func(map[interface{}]*{{ .MsgName  }}) error
	cb []func(*{{ .MsgName }})
	rows map[interface{}]*{{ .MsgName  }}
	{{ range $i, $f := SubQueries . }}
	load{{ $f.MsgName }} bool
	opts{{ $f.MsgName }} []{{ $f.FK.Remote.Table.MsgName }}Option{{end}}
}

type {{ .MsgName }}Option func(*query{{ .MsgName }}Config)
func {{ .MsgName }}Filter(filter pg.Where) {{ .MsgName }}Option {
	return func(config *query{{ .MsgName }}Config) {
		if config.filter == nil {
			config.filter = filter
		} else {
			config.filter = pg.AND(config.filter, filter)
		}
	}
}

func {{ .MsgName }}OnRow(cb func(*{{ .MsgName }})) {{ .MsgName }}Option {
	return func(s *query{{ .MsgName }}Config){
		s.cb = append(s.cb, cb)
	}
}
{{range $i, $f := SubQueries . }}
func {{ $.MsgName }}With{{ $f.MsgName }}(opts ...{{ $f.FK.Remote.Table.MsgName }}Option) {{$.MsgName }}Option {
	return func(config *query{{ $.MsgName }}Config) {
		map{{ $f.MsgName }} := make(map[interface{}]*{{ $.MsgName }})
		config.load{{ $f.MsgName }} = true
		config.opts{{ $f.MsgName }} = opts
		config.cb = append(config.cb, func(row *{{ $.MsgName }}) {
			{{if $f.Repeated }} // repeated
				map{{ $f.MsgName }}[row.{{ GetPKName $ }}] = row
			{{else}} // one-to-one
				map{{ $f.MsgName }}[row.{{ getFullFieldName $f }}] = row
			{{end}}
		})
		config.opts{{ $f.MsgName }} = append(config.opts{{ $f.MsgName }}, 
			{{ $f.FK.Remote.Table.MsgName }}OnRow(func(row *{{ $f.FK.Remote.Table.MsgName }}) {
				{{ if IsReverseFK $f }} // reversed
				if config.rows[row.{{ $f.MsgName }}] != nil {
					row.{{ $f.MsgName }} = config.rows[row.{{ $f.MsgName }}]
				}
				{{end}}

				{{if $f.Repeated }} // repeated
				if config.rows[row.{{ getFullFieldName $f.FK.Remote }}] != nil {
					config.rows[row.{{ getFullFieldName $f.FK.Remote }}].{{ $f.MsgName }} = append(config.rows[row.{{ getFullFieldName $f.FK.Remote }}].{{ $f.MsgName }}, row)
				}
				{{else}} // one-to-one
				item := map{{ $f.MsgName }}[row.{{ GetPKName $f.FK.Remote.Table }}]
				if config.rows[item.{{ GetPKName $ }}] != nil {
					config.rows[item.{{ GetPKName $ }}].{{ $f.MsgName }} = row
				}
				{{end}}
			}),
			{{ $f.FK.Remote.Table.MsgName }}Filter(pg.INCallabel("{{ $f.DbfkField }}", func() []interface{} {
				ids := []interface{}{}
				for id := range map{{ $f.MsgName }} {
					ids = append(ids, id)
				}
				return ids
			})),
		) 
	}
}{{ end }}
{{end}}
